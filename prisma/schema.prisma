generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model users {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  name      String
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  role      Role       @default(VISITANTE)
  comments  comments[]
  portfolio portfolio?
}

model portfolio {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  assets asset[]
  user   users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String  @unique @db.ObjectId
}

model asset {
  id                     String                @id @default(auto()) @map("_id") @db.ObjectId
  ticket                 String
  name                   String
  purchasePrice          Float
  recommendationDate     DateTime?             @default(now())
  quantity               Int
  createdDate            DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  status                 String?
  recommended            Boolean
  portfolio              portfolio             @relation(fields: [portfolioId], references: [id], onUpdate: Cascade)
  portfolioId            String                @db.ObjectId
  recommendedPortfolio   recommendedPortfolio? @relation(fields: [recommendedPortfolioId], references: [id])
  recommendedPortfolioId String?               @db.ObjectId
  type                   type?
}

model type {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  type    String // ETF STOCK SHARES
  asset   asset  @relation(fields: [assetId], references: [id])
  assetId String @unique @db.ObjectId
}

model recommendedPortfolio {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  ranking             Int
  recommendationValue Float
  updatedAt           DateTime @updatedAt
  assets              asset[]
}

model comments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comments  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      users    @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

enum Role {
  MENTORADO
  MENTOR
  ADMIN
  VISITANTE
}
